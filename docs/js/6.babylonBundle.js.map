{"version":3,"sources":["webpack:///./assets/glb/haunted_house.glb","webpack:///./assets/john-o-nolan-o_gJAkcKJmM-unsplash.jpg","webpack:///./src/scenes/defaultWithTextureMesh.ts"],"names":["createScene","engine","canvas","scene","dispose","meshes","forEach","x","camera","Math","PI","setTarget","Zero","attachControl","upperBetaLimit","intensity","tiledBox","CreateTiledBox","depth","width","height","position","y","z","resetCachedMaterial","oldMesh","getMeshByName","ImportMeshAsync","undefined","groundMaterial","diffuseTexture","CreateGroundFromHeightMap","material","DefaultSceneWithTexture"],"mappings":"0FAAe,QAA0B,wC,iCCA1B,QAA0B,wC,2/CCgBzC,wBACI,KAAAA,YAAc,SACVC,EACAC,GAAyB,qC,gEAqDJ,OAlDjBC,EAAQ,IAAI,IAAMF,IAChBG,WACND,EAAQ,IAAI,IAAMF,IACZI,QAAUF,EAAME,OAAOC,SAAQ,SAACC,GAAM,OAAAA,EAAEH,cAGxCI,EAAS,IAAI,IACf,kBACAC,KAAKC,GAAK,IACVD,KAAKC,GAAK,IACV,IACA,IAAI,IAAQ,EAAG,EAAG,GAClBP,IAIGQ,UAAU,IAAQC,QAGzBJ,EAAOK,cAAcX,GAAQ,GAE7BM,EAAOM,eAAkBL,KAAKC,GAAK,EAAK,IAG1B,IAAI,IACd,QACA,IAAI,IAAQ,EAAG,EAAG,GAClBP,GAIEY,UAAY,IAEZC,EAAW,IAAYC,eACzB,MACA,CAAEC,MAAO,GAAIC,MAAO,EAAGC,OAAQ,IAC/BjB,IAGKkB,SAASC,EAAI,EACtBN,EAASK,SAASd,GAAK,EACvBS,EAASK,SAASE,GAAK,EACvBpB,EAAMqB,uBAGAC,EAAUtB,EAAMuB,cAAc,kBAEhCD,EAAQrB,UAGS,GAAM,IAAYuB,gBACnC,GACA,GACA,IACAxB,OACAyB,EACA,S,OAwBJ,OA9BqB,UASfC,EAAiB,IAAI,IAAiB,SAAU1B,IACvC2B,eAAiB,IAAI,IAAQ,IAAmB3B,GAKhD,IAAK4B,0BAChB,SACA,IACA,IACA,IACA,EACA,EACA,EACA5B,GACA,GAIG6B,SAAWH,EAEX,CAAP,EAAO1B,YAIA,cAAI8B","file":"js/6.babylonBundle.js","sourcesContent":["export default __webpack_public_path__ + \"09099a357bd30f8395900a6a912b39dd.glb\";","export default __webpack_public_path__ + \"a31875b76d39f6458a6e5bc68acee61a.jpg\";","import { Engine } from \"@babylonjs/core/Engines/engine\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\nimport { CreateSceneClass } from \"../createScene\";\nimport { Mesh, MeshBuilder, SceneLoader } from \"@babylonjs/core\";\n\n// If you don't need the standard material you will still need to import it since the scene requires it.\n\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\n\nimport groundTextureUrl2 from \"../../assets/john-o-nolan-o_gJAkcKJmM-unsplash.jpg\";\nimport controllerModel from \"../../assets/glb/haunted_house.glb\";\n\nexport class DefaultSceneWithTexture implements CreateSceneClass {\n    createScene = async (\n        engine: Engine,\n        canvas: HTMLCanvasElement\n    ): Promise<Scene> => {\n        // This creates a basic Babylon Scene object (non-mesh)\n        let scene = new Scene(engine);\n        scene.dispose();\n        scene = new Scene(engine);\n        scene.meshes && scene.meshes.forEach((x) => x.dispose());\n\n        // This creates and positions a free camera (non-mesh)\n        const camera = new ArcRotateCamera(\n            \"my first camera\",\n            Math.PI / 1.9,\n            Math.PI / 2.5,\n            150,\n            new Vector3(0, 0, 0),\n            scene\n        );\n\n        // This targets the camera to scene origin\n        camera.setTarget(Vector3.Zero());\n\n        // This attaches the camera to the canvas\n        camera.attachControl(canvas, true);\n\n        camera.upperBetaLimit = (Math.PI / 2) * 0.99;\n\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n        const light = new HemisphericLight(\n            \"light\",\n            new Vector3(1, 1, 0),\n            scene\n        );\n\n        // Default intensity is 1. Let's dim the light a small amount\n        light.intensity = 0.8;\n\n        const tiledBox = MeshBuilder.CreateTiledBox(\n            \"box\",\n            { depth: 10, width: 8, height: 12 },\n            scene\n        );\n        // Move the box upward 1/2 its height\n        tiledBox.position.y = 6;\n        tiledBox.position.x = -5;\n        tiledBox.position.z = -4;\n        scene.resetCachedMaterial();\n        // Our built-in 'ground' shape.\n\n        const oldMesh = scene.getMeshByName(\"hauntedHouse\");\n        if (oldMesh) {\n            oldMesh.dispose();\n        }\n\n        const importResult = await SceneLoader.ImportMeshAsync(\n            \"\",\n            \"\",\n            controllerModel,\n            scene,\n            undefined,\n            \".glb\"\n        );\n\n        const groundMaterial = new StandardMaterial(\"ground\", scene);\n        groundMaterial.diffuseTexture = new Texture(groundTextureUrl2, scene);\n\n        // Use CreateGroundFromHeightMap to create a height map of 200 units by 200\n        // units, with 250 subdivisions in each of the `x` and `z` directions, for a\n        // total of 62,500 divisions.\n        const ground = Mesh.CreateGroundFromHeightMap(\n            \"ground\",\n            groundTextureUrl2,\n            800,\n            800,\n            0,\n            0,\n            0,\n            scene,\n            false\n        );\n\n        // When our new mesh is read, apply our material.\n        ground.material = groundMaterial;\n\n        return scene;\n    };\n}\n\nexport default new DefaultSceneWithTexture();\n"],"sourceRoot":""}